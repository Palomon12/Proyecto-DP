package CampoCodigo;

import CampoCodigo.builders.CategoriaBuilder;
import CampoCodigo.builders.EnvioBuilder;
import CampoCodigo.builders.PagoBuilder;
import CampoCodigo.builders.PedidoBuilder;
import CampoCodigo.builders.ProductoBuilder;
import CampoCodigo.builders.UsuarioBuilder;
import ClasesDAO.*;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Date;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.List;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Predicate;

public class Administrador {

    private static final Scanner scanner = new Scanner(System.in);
    private static ProductoDAO productoDAO;
    private static CategoriaDAO categoriaDAO;
    private static UsuarioDAO usuarioDAO;

    static {
        try {
            productoDAO = new ProductoDAO();
            categoriaDAO = new CategoriaDAO();
            usuarioDAO = new UsuarioDAO();
        } catch (SQLException e) {
            // decide qu√© hacer: registrar y abortar, lanzar RuntimeException, etc.
            throw new RuntimeException("No se pudieron inicializar los DAOs", e);
        }
    }
    private static final CarritoCompra carritoCompra = new CarritoCompra(1);
    private static Usuario usuarioActual = null;
    private static boolean esAdmin = false;

    public static void main(String[] args) throws SQLException {
        CConexion objetoconexion = CConexion.getInstancia();
        objetoconexion.getConexion();

        iniciarTienda();

        if (!preguntarSiTieneCuenta()) {
            registrarUsuario();
        } else if (!iniciarSesion()) {
            System.out.println("Error en el inicio de sesi√≥n. Saliendo...");
            return;
        }

        AccesoAdministrador proxy = new AdministradorProxy(usuarioActual);

        boolean salir = false;
        while (!salir) {
            mostrarMenu();
            int opcion = scanner.nextInt();
            scanner.nextLine();

            switch (opcion) {
                case 1 -> {
                    if (esAdmin) {
                        proxy.gestionarProductos();
                    } else {
                        verCarrito();
                    }
                }
                case 2 -> {
                    if (esAdmin) {
                        proxy.gestionarCategorias();
                    } else {
                        realizarCompra();
                    }
                }
                case 3 -> {
                    proxy.gestionarUsuarios();
                }
                case 4 -> {
                    proxy.generarInforme();
                }
                case 6 -> {
                    salir = true;
                    System.out.println("Saliendo del sistema...");
                }
                default ->
                    System.out.println("Opci√≥n no v√°lida, por favor elija otra.");
            }
        }
    }

    private static void mostrarMenu() {
        System.out.println("\n--- Men√∫ Principal ---");
        if (esAdmin) {
            System.out.println("1. Gestionar Productos");
            System.out.println("2. Gestionar Categor√≠as");
            System.out.println("3. Gestionar Usuarios");
            System.out.println("4. Generar Informe de Ventas");
        } else {
            System.out.println("1. Ver Carrito de Compras");
            System.out.println("2. Realizar Compra");
        }
        System.out.println("6. Salir");
        System.out.print("Seleccione una opci√≥n: ");
    }

    private static void registrarUsuario() throws SQLException {
        System.out.println("\n--- Registro de Usuario ---");

        // Predicados para validaci√≥n
        Predicate<String> correoValido = correo -> correo.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$");
        Predicate<String> contrase√±aValida = password
                -> password.length() >= 8
                && password.matches(".*[a-z].*")
                && password.matches(".*[A-Z].*")
                && password.matches(".*\\d.*");

        // Consumer para mostrar mensajes
        Consumer<String> mostrarMensaje = System.out::println;

        // Validar el correo
        String correo;
        while (true) {
            System.out.print("Ingrese su correo: ");
            correo = scanner.nextLine().trim();
            if (correoValido.test(correo)) {
                break;
            } else {
                mostrarMensaje.accept("El formato del correo es inv√°lido. Intente nuevamente.");
            }
        }

        // Validar la contrase√±a
        String contrase√±a;
        while (true) {
            System.out.print("Ingrese una nueva contrase√±a: ");
            contrase√±a = scanner.nextLine().trim();
            if (contrase√±aValida.test(contrase√±a)) {
                break;
            } else {
                mostrarMensaje.accept("La contrase√±a debe tener al menos 8 caracteres, incluir may√∫sculas, min√∫sculas y n√∫meros.");
            }
        }

        System.out.print("Ingrese su nombre: ");
        String nombre = scanner.nextLine();
        String tipo = "Cliente";
        System.out.print("Ingrese su direcci√≥n: ");
        String direccion = scanner.nextLine();

        // Validar el tel√©fono
        String telefono;
        while (true) {
            System.out.print("Ingrese su tel√©fono (9 d√≠gitos): ");
            telefono = scanner.nextLine().trim();
            if (telefono.matches("\\d{9}")) {
                break;
            } else {
                mostrarMensaje.accept("El n√∫mero de tel√©fono debe tener exactamente 9 d√≠gitos.");
            }
        }

        int telefonoInt = Integer.parseInt(telefono);

        // Crear nuevo usuario con Builder
        Usuario nuevoUsuario = new UsuarioBuilder()
                .setId(0)
                .setNombre(nombre)
                .setEmail(correo)
                .setContrase√±a(contrase√±a)
                .setTipo(tipo)
                .setDireccion(direccion)
                .setTelefono(telefonoInt)
                .build();

        // Registrar usuario
        if (usuarioDAO.crear(nuevoUsuario)) {
            mostrarMensaje.accept("Usuario registrado con √©xito.");

            // Recuperar y asignar el usuario actual
            usuarioActual = usuarioDAO.obtenerUsuarioPorEmail(correo);

            if (usuarioActual != null) {
                mostrarMensaje.accept("Bienvenido, " + usuarioActual.getNombre() + "!");
            } else {
                mostrarMensaje.accept("Error al recuperar el usuario reci√©n registrado.");
            }
        } else {
            mostrarMensaje.accept("Error al registrar el usuario.");
        }
    }

    private static boolean preguntarSiTieneCuenta() {
        // Siempre limpiar el buffer ANTES si venimos de un nextInt()
        if (scanner.hasNextLine()) {
            scanner.nextLine();
        }

        System.out.print("\n**Cuenta administrador**: \nCorreo: kpalomino233@gmail.com\nContrase√±a: Mimamamemima123 \n¬øTiene una cuenta? (s/n): ");
        String respuesta = scanner.nextLine().trim();  // trim() elimina espacios

        return respuesta.equalsIgnoreCase("s");
    }

    private static boolean iniciarSesion() throws SQLException {
        boolean sesionIniciada = false;

        // Predicados para validaci√≥n
        Predicate<String> correoValido = correo -> correo.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$");
        Predicate<String> contrase√±aValida = password
                -> password.length() >= 8
                && password.matches(".*[a-z].*")
                && password.matches(".*[A-Z].*")
                && password.matches(".*\\d.*");

        // BiPredicate para verificar si es administrador
        BiPredicate<String, String> esAdministrador = (correo, password)
                -> correo.equalsIgnoreCase("kpalomino233@gmail.com") && password.equals("Mimamamemima123");

        // Consumer para mostrar mensajes
        Consumer<String> mostrarMensaje = System.out::println;

        while (!sesionIniciada) {
            System.out.print("\n--- Inicio de Sesi√≥n ---\n");
            System.out.print("Ingrese su correo: ");
            String correo = scanner.nextLine().trim();
            System.out.print("Ingrese su contrase√±a: ");
            String password = scanner.nextLine().trim();

            // Validar correo y contrase√±a
            if (!correoValido.test(correo)) {
                mostrarMensaje.accept("El formato del correo es inv√°lido. Intente nuevamente.");
                continue;
            }
            if (!contrase√±aValida.test(password)) {
                mostrarMensaje.accept("La contrase√±a debe tener al menos 8 caracteres, incluir may√∫sculas, min√∫sculas y n√∫meros.");
                continue;
            }

            // Verificar si es administrador
            if (esAdministrador.test(correo, password)) {
                mostrarMensaje.accept("¬°Inicio de sesi√≥n como administrador exitoso!");
                esAdmin = true;

                // üîß Aseg√∫rate de crear un objeto Usuario con tipo Admin:
                usuarioActual = new UsuarioBuilder()
                        .setId(0)
                        .setNombre("Administrador")
                        .setEmail(correo)
                        .setContrase√±a(password)
                        .setTipo("Admin") // <-- Esto es lo que necesita el proxy
                        .setDireccion("Direcci√≥n admin")
                        .setTelefono(999999999)
                        .build();

                sesionIniciada = true;
                break;
            }

            // Si no es administrador, consultar en la base de datos
            Usuario usuario = usuarioDAO.leerPorCredenciales(correo, password);

            if (usuario != null) {
                mostrarMensaje.accept("¬°Inicio de sesi√≥n exitoso!");
                usuarioActual = usuario; // Asignar el usuario a la variable global
                sesionIniciada = true;
            } else {
                mostrarMensaje.accept("Credenciales incorrectas. Verifique su correo y contrase√±a.");
            }
        }

        return sesionIniciada;
    }

    private static void iniciarTienda() throws SQLException {

        List<Producto> productos = productoDAO.leerTodos();
        List<Categoria> categorias = categoriaDAO.leerTodos();

        if (productos.isEmpty() && categorias.isEmpty()) {
            System.out.println("Inicializando categor√≠as y productos predeterminados...");

            // Crear categor√≠as con un stream
            List<Categoria> listaCategorias = List.of(
                    new Categoria(1, "Bebidas"),
                    new Categoria(2, "Snacks"),
                    new Categoria(3, "Limpieza"),
                    new Categoria(4, "L√°cteos")
            );
            listaCategorias.forEach(categoria -> {
                try {
                    categoriaDAO.crear(categoria);
                } catch (SQLException e) {
                    System.err.println("Error al crear categor√≠a: " + categoria.getNombre() + " - " + e.getMessage());
                }
            });

            // Crear productos con un stream
            List<Producto> listaProductos = List.of(
                    new Producto(1, "Coca Cola 500ml", 3.50, "Bebida gaseosa", 100),
                    new Producto(2, "Inca Kola 1L", 5.00, "Bebida gaseosa", 80),
                    new Producto(3, "Agua Cielo 625ml", 2.00, "Agua mineral", 200),
                    new Producto(4, "Cerveza Pilsen 355ml", 4.50, "Bebida alcoh√≥lica", 50),
                    new Producto(5, "Pepsi 1L", 4.00, "Bebida gaseosa", 90),
                    new Producto(6, "Chips Ahoy", 4.50, "Galletas con chips de chocolate", 150),
                    new Producto(7, "Galletas Oreo", 2.50, "Galletas de chocolate rellenas", 120),
                    new Producto(8, "Papitas Lays", 3.00, "Papas fritas", 200),
                    new Producto(9, "Chocolatina Sublime", 1.80, "Chocolatina con man√≠", 250),
                    new Producto(10, "Chocman", 1.50, "Pastelito cubierto de chocolate", 180),
                    new Producto(11, "Leche Gloria 1L", 4.00, "Leche evaporada", 300),
                    new Producto(12, "Yogurt Gloria 1L", 5.50, "Yogurt de fresa", 100),
                    new Producto(13, "Queso Edam 250g", 10.00, "Queso semi-duro", 60),
                    new Producto(14, "Detergente Ariel 500g", 8.00, "Detergente en polvo", 70),
                    new Producto(15, "Jab√≥n Ace 1L", 6.00, "Jab√≥n l√≠quido", 80)
            );
            listaProductos.forEach(producto -> {
                try {
                    productoDAO.crear(producto);
                } catch (SQLException e) {
                    System.err.println("Error al crear producto: " + producto.getNombre() + " - " + e.getMessage());
                }
            });
        }

        System.out.println("*** Bienvenido a la Tiendita de Don Pepe ***");
    }

    static void gestionarProductos() throws SQLException {
        System.out.println("\n--- Gesti√≥n de Productos ---");
        System.out.println("Seleccione una opci√≥n:");
        System.out.println("1. Agregar Producto");
        System.out.println("2. Modificar Producto");
        System.out.println("3. Eliminar Producto");
        int opcion = scanner.nextInt();
        scanner.nextLine();

        switch (opcion) {
            case 1 ->
                agregarProducto();
            case 2 ->
                modificarProducto();
            case 3 ->
                eliminarProducto();
            default ->
                System.out.println("Opci√≥n no v√°lida.");
        }
    }

    private static void agregarProducto() throws SQLException {
        System.out.println("\nIngrese los detalles del nuevo producto a agregar:");
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Precio: ");
        double precio = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Descripci√≥n: ");
        String descripcion = scanner.nextLine();
        System.out.print("Stock: ");
        int stock = scanner.nextInt();
        scanner.nextLine();
//Modificado con builder
        Producto nuevoProducto = new ProductoBuilder()
                .setNombre(nombre)
                .setPrecio(precio)
                .setDescripcion(descripcion)
                .setCantidad(stock)
                .build();

        productoDAO.crear(nuevoProducto);
        System.out.println("Producto agregado con √©xito.");

    }

    private static void modificarProducto() throws SQLException {
        System.out.print("\nIngrese el ID del producto a modificar: ");
        int idProducto = scanner.nextInt();
        scanner.nextLine();

        Producto producto = productoDAO.leer(idProducto);
        if (producto != null) {
            System.out.print("Nuevo nombre (" + producto.getNombre() + "): ");
            String nuevoNombre = scanner.nextLine();
            producto.setNombre(!nuevoNombre.isEmpty() ? nuevoNombre : producto.getNombre());

            System.out.print("Nuevo precio (" + producto.getPrecio() + "): ");
            double nuevoPrecio = scanner.nextDouble();
            scanner.nextLine();
            producto.setPrecio(nuevoPrecio > 0 ? nuevoPrecio : producto.getPrecio());

            System.out.print("Nueva descripci√≥n (" + producto.getDescripcion() + "): ");
            String nuevaDescripcion = scanner.nextLine();
            producto.setDescripcion(!nuevaDescripcion.isEmpty() ? nuevaDescripcion : producto.getDescripcion());

            System.out.print("Nuevo stock (" + producto.getCantidad() + "): ");
            int nuevoStock = scanner.nextInt();
            scanner.nextLine();
            producto.setCantidad(nuevoStock > 0 ? nuevoStock : producto.getCantidad());

            productoDAO.actualizar(producto);
            System.out.println("Producto modificado con √©xito.");
        } else {
            System.out.println("Producto no encontrado.");
        }
    }

    private static void eliminarProducto() throws SQLException {
        System.out.print("Ingrese el ID del producto a eliminar: ");
        int idProducto = scanner.nextInt();
        scanner.nextLine();

        Producto producto = productoDAO.leer(idProducto);
        if (producto != null) {
            productoDAO.eliminar(idProducto);
            System.out.println("Producto eliminado con √©xito.");
        } else {
            System.out.println("Producto no encontrado.");
        }
    }

    static void gestionarCategorias() throws SQLException {
        System.out.println("\n--- Gesti√≥n de Categor√≠as ---");
        System.out.println("Seleccione una opci√≥n:");
        System.out.println("1. Agregar Categor√≠a");
        System.out.println("2. Modificar Categor√≠a");
        System.out.println("3. Eliminar Categor√≠a");
        int opcion = scanner.nextInt();
        scanner.nextLine();

        switch (opcion) {
            case 1 ->
                agregarCategoria();
            case 2 ->
                modificarCategoria();
            case 3 ->
                eliminarCategoria();
            default ->
                System.out.println("Opci√≥n no v√°lida.");
        }
    }

    private static void agregarCategoria() throws SQLException {
        System.out.print("Ingrese el nombre de la nueva categor√≠a: ");
        String nombre = scanner.nextLine();

        Categoria nuevaCategoria = new CategoriaBuilder()
                .setId(0)
                .setNombre(nombre)
                .build();

        categoriaDAO.crear(nuevaCategoria);
        System.out.println("Categor√≠a agregada con √©xito.");
    }

    private static void modificarCategoria() throws SQLException {
        System.out.print("Ingrese el ID de la categor√≠a a modificar: ");
        int idCategoria = scanner.nextInt();
        scanner.nextLine();

        Categoria categoria = categoriaDAO.leer(idCategoria);
        if (categoria != null) {
            System.out.print("Nuevo nombre (" + categoria.getNombre() + "): ");
            String nuevoNombre = scanner.nextLine();
            categoria.setNombre(!nuevoNombre.isEmpty() ? nuevoNombre : categoria.getNombre());

            categoriaDAO.actualizar(categoria);
            System.out.println("Categor√≠a modificada con √©xito.");
        } else {
            System.out.println("Categor√≠a no encontrada.");
        }
    }

    private static void eliminarCategoria() throws SQLException {

        System.out.print("Ingrese el ID de la categor√≠a a eliminar: ");
        int idCategoria = scanner.nextInt();
        scanner.nextLine();

        Categoria categoria = categoriaDAO.leer(idCategoria);
        if (categoria != null) {
            categoriaDAO.eliminar(idCategoria);
            System.out.println("Categor√≠a eliminada con √©xito.");
        } else {
            System.out.println("Categor√≠a no encontrada.");
        }
    }

    private static void verCarrito() {
        System.out.println("\n--- Carrito de Compras ---");
        carritoCompra.mostrarProductosDelCarrito();
        System.out.println("Total: " + carritoCompra.calcularTotal());
    }

    private static void realizarCompra() throws SQLException {
        if (usuarioActual == null || usuarioActual.getId_usuario() == 0) {
            System.out.println("Error: Debes iniciar sesi√≥n o registrar un usuario antes de realizar una compra.");
            return;
        }
        if (!esAdmin) {
            System.out.println("\n--- Realizar Compra ---");

            List<Producto> productos = productoDAO.leerTodos();

            if (productos.isEmpty()) {
                System.out.println("No hay productos disponibles.");
                return;
            }

            System.out.println("\n--- Productos Disponibles ---");
            for (Producto producto : productos) {
                System.out.printf("ID: %d - %s - %.2f - %s (Stock: %d)%n",
                        producto.getId_producto(),
                        producto.getNombre(),
                        producto.getPrecio(),
                        producto.getDescripcion(),
                        producto.getCantidad());
            }

            boolean continuar = true;
            while (continuar) {
                System.out.print("Ingrese el ID del producto que desea agregar al carrito (o 0 para finalizar): ");
                int idProducto = scanner.nextInt();
                scanner.nextLine();

                if (idProducto == 0) {
                    continuar = false; // Salir del bucle si el usuario no quiere agregar m√°s productos
                } else {
                    Producto productoSeleccionado = productoDAO.leer(idProducto);
                    if (productoSeleccionado != null) {
                        System.out.print("Ingrese la cantidad que desea comprar: ");
                        int cantidad = scanner.nextInt();
                        scanner.nextLine();

                        if (cantidad > 0 && cantidad <= productoSeleccionado.getCantidad()) {
                            carritoCompra.agregarAlCarrito(productoSeleccionado, cantidad);
                            System.out.println("Producto agregado al carrito.");
                        } else {
                            System.out.println("Cantidad inv√°lida. Intente de nuevo.");
                        }
                    } else {
                        System.out.println("Producto no encontrado.");
                    }
                }
            }

            verCarrito();

            if (carritoCompra.calcularTotal() > 0) {
                System.out.println("Procesando pago...");
                Pago pago = new PagoBuilder()
                        .setId(0)
                        .setMonto(carritoCompra.calcularTotal())
                        .build();

                if (!pago.verificarPago()) {
                    System.out.println("El monto del pago debe ser mayor a cero.");
                    return;
                }

                String direccionEnvio = usuarioActual.getDireccion();
                Envio envio = new EnvioBuilder()
                        .setId(0)
                        .setEstado("En proceso")
                        .setFecha(LocalDate.now())
                        .setDireccion(direccionEnvio)
                        .build();

                EnvioDAO envioDAO = new EnvioDAO();
                envioDAO.crear(envio);

                double total = carritoCompra.calcularTotal();
                Pedido pedido = new PedidoBuilder()
                        .setUsuario(usuarioActual)
                        .setEstado("Pendiente")
                        .setFecha(new Date())
                        .setTotal(total)
                        .build();

                // Guardar el pedido en la base de datos
                PedidoDAO pedidoDAO = new PedidoDAO();
                pedidoDAO.crear(pedido);

                // Actualizar stock del producto
                for (CarritoItem item : carritoCompra.getItems()) {
                    Producto producto = item.getProducto();
                    producto.setCantidad(producto.getCantidad() - item.getCantidad());
                    productoDAO.actualizar(producto);
                }

                // Generar el voucher
                generarVoucher(pedido, carritoCompra.getItems(), direccionEnvio);

                // Vaciar el carrito despu√©s de la compra
                carritoCompra.vaciarCarrito();

                System.out.println("Compra realizada exitosamente.");
            } else {
                System.out.println("El carrito est√° vac√≠o. No se puede realizar la compra.");
            }
        } else {
            System.out.println("Los administradores no pueden realizar compras.");
        }
    }

    private static void generarVoucher(Pedido pedido, List<CarritoItem> items, String direccionEnvio) {
        System.out.println("\n--- Voucher de Compra ---");
        System.out.println("N√∫mero de Pedido: " + pedido.getId_Pedido());
        System.out.println("Fecha: " + pedido.getFecha_Pedido());
        System.out.println("Usuario: " + usuarioActual.getNombre());
        System.out.println("Direcci√≥n de Env√≠o: " + direccionEnvio);
        System.out.println("\n--- Detalles de la Compra ---");

        for (CarritoItem item : items) {
            System.out.printf("%s x%d - Subtotal: %.2f%n",
                    item.getProducto().getNombre(),
                    item.getCantidad(),
                    item.calcularSubtotal());
        }

        System.out.printf("\nTotal a pagar: %.2f%n", pedido.getTotal());
        System.out.println("--------------------------");
    }

    public Producto buscarProducto(int idProducto) throws SQLException {
        ProductoDAO productoDAO = new ProductoDAO();
        try {
            return productoDAO.leer(idProducto);
        } catch (SQLException e) {

            e.printStackTrace();
            return null;
        }
    }

    static void generarInforme() throws SQLException {
        System.out.println("\n--- Generar Informe de Ventas ---");
        InformeDAO informeDAO = new InformeDAO();
        informeDAO.generarInforme();

    }

    static void gestionarUsuarios() throws SQLException {
        Scanner scanner = new Scanner(System.in);

        System.out.println("=== Gesti√≥n de Usuarios ===");
        System.out.println("1. Agregar Usuario");
        System.out.println("2. Modificar Usuario");
        System.out.println("3. Eliminar Usuario");
        System.out.print("Seleccione una opci√≥n: ");
        int option = scanner.nextInt();

        switch (option) {
            case 1 ->
                agregarUsuario();
            case 2 ->
                modificarUsuario();
            case 3 ->
                eliminarUsuario();
            default ->
                System.out.println("Opci√≥n inv√°lida.");
        }
    }

    private static void agregarUsuario() throws SQLException {
        Scanner scanner = new Scanner(System.in);
        boolean agregado = false;

        while (!agregado) {
            try {
                System.out.print("Ingrese el nombre del usuario: ");
                String nombre = scanner.nextLine();

                System.out.print("Ingrese el correo electr√≥nico: ");
                String email = scanner.nextLine();

                System.out.print("Ingrese la contrase√±a: ");
                String contrase√±a = scanner.nextLine();

                String tipo = "Cliente";

                System.out.println("Ingrese la direccion del usuario: ");
                String direccion = scanner.nextLine();

                System.out.println("Ingrese el telefono del usuario: ");
                int telefono = scanner.nextInt();

                Usuario usuario = new UsuarioBuilder()
                        .setId(0)
                        .setNombre(nombre)
                        .setEmail(email)
                        .setContrase√±a(contrase√±a)
                        .setTipo(tipo)
                        .setDireccion(direccion)
                        .setTelefono(telefono)
                        .build();
                usuarioDAO.crear(usuario);

                System.out.println("Usuario agregado con √©xito.");
                agregado = true;
            } catch (SQLException e) {
                System.err.println("Error al agregar el usuario: " + e.getMessage());
            } catch (InputMismatchException e) {
                System.err.println("Entrada inv√°lida. Por favor, ingrese los datos nuevamente.");
                scanner.nextLine(); // Limpiar el buffer del scanner
            }
        }
    }

    private static void modificarUsuario() throws SQLException {

        /// Obtener todos los usuarios
        List<Usuario> usuarios = usuarioDAO.leerTodos();

        if (usuarios.isEmpty()) {
            System.out.println("No hay usuarios disponibles.");
            return;
        }

        // Mostrar la lista de usuarios
        System.out.println("Usuarios disponibles:");
        for (Usuario usuario : usuarios) {
            System.out.println("ID: " + usuario.getId_usuario() + " - Nombre: " + usuario.getNombre()
                    + " - Correo: " + usuario.getEmail() + " - Tel√©fono: " + usuario.getTelefono());
        }

        System.out.print("Ingrese el ID del usuario a modificar: ");
        int idUsuario = scanner.nextInt();
        scanner.nextLine();

        Usuario usuario = usuarioDAO.leer(idUsuario); // Leer el usuario existente
        if (usuario != null) {
            System.out.println("Datos actuales del usuario: ");
            System.out.println("Nombre: " + usuario.getNombre());
            System.out.println("Email: " + usuario.getEmail());
            System.out.println("Contrase√±a: " + usuario.getContrase√±a());
            System.out.println("Direcci√≥n: " + usuario.getDireccion());
            System.out.println("Tel√©fono: " + usuario.getTelefono());

            System.out.print("Nuevo nombre (" + usuario.getNombre() + "): ");
            String nuevoNombre = scanner.nextLine();
            System.out.print("Nuevo email (" + usuario.getEmail() + "): ");
            String nuevoEmail = scanner.nextLine();
            System.out.print("Nueva contrase√±a (" + usuario.getContrase√±a() + "): ");
            String nuevaContrase√±a = scanner.nextLine();
            System.out.print("Nueva direcci√≥n (" + usuario.getDireccion() + "): ");
            String nuevaDireccion = scanner.nextLine();
            System.out.print("Nuevo tel√©fono (" + usuario.getTelefono() + "): ");
            int nuevoTelefono = scanner.hasNextInt() ? scanner.nextInt() : usuario.getTelefono();
            scanner.nextLine(); // Limpiar el buffer del scanner

            // Actualizar los datos del usuario
            usuario.setNombre(!nuevoNombre.isEmpty() ? nuevoNombre : usuario.getNombre());
            usuario.setEmail(!nuevoEmail.isEmpty() ? nuevoEmail : usuario.getEmail());
            usuario.setContrase√±a(!nuevaContrase√±a.isEmpty() ? nuevaContrase√±a : usuario.getContrase√±a());
            usuario.setDireccion(!nuevaDireccion.isEmpty() ? nuevaDireccion : usuario.getDireccion());
            usuario.setTelefono(nuevoTelefono);

            usuarioDAO.actualizar(usuario); // Actualizar en la base de datos
            System.out.println("Usuario modificado con √©xito.");
        } else {
            System.out.println("Usuario no encontrado.");
        }
    }

    private static void eliminarUsuario() throws SQLException {

        /// Obtener todos los usuarios
        List<Usuario> usuarios = usuarioDAO.leerTodos();

        if (usuarios.isEmpty()) {
            System.out.println("No hay usuarios disponibles.");
            return;
        }

        // Mostrar la lista de usuarios
        System.out.println("Usuarios disponibles:");
        for (Usuario usuario : usuarios) {
            System.out.println("ID: " + usuario.getId_usuario() + " - Nombre: " + usuario.getNombre()
                    + " - Correo: " + usuario.getEmail() + " - Tel√©fono: " + usuario.getTelefono());
        }

        System.out.print("Ingrese el ID del usuario a eliminar: ");
        int idUsuario = scanner.nextInt();
        scanner.nextLine();

        Usuario usuario = usuarioDAO.leer(idUsuario); // Verificar si el usuario existe
        if (usuario != null) {
            System.out.println("¬øEst√° seguro de que desea eliminar al usuario " + usuario.getNombre() + "? (s/n)");
            String confirmacion = scanner.nextLine();
            if (confirmacion.equalsIgnoreCase("s")) {
                usuarioDAO.eliminar(idUsuario); // Eliminar de la base de datos
                System.out.println("Usuario eliminado con √©xito.");
            } else {
                System.out.println("Operaci√≥n cancelada.");
            }
        } else {
            System.out.println("Usuario no encontrado.");
        }
    }
}
